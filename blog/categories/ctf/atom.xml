<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ctf | Zeus@HackOlympus:~$]]></title>
  <link href="http://hackolympus.com//blog/categories/ctf/atom.xml" rel="self"/>
  <link href="http://hackolympus.com/"/>
  <updated>2022-01-04T22:55:38+05:30</updated>
  <id>http://hackolympus.com/</id>
  <author>
    <name><![CDATA[Zeus]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bo1ler CTF -2021  writeup]]></title>
    <link href="http://hackolympus.com/blog/2021/04/06/Bo1ler-CTF-2021-writeup/"/>
    <updated>2021-04-06T00:00:00+05:30</updated>
    <id>http://hackolympus.com/blog/2021/04/06/Bo1ler-CTF-2021-writeup</id>
    <content type="html"><![CDATA[<p>So recently I played Bo1ler CTF. Normally I don&rsquo;t write writeups for a CTF (due to time constraints) but this time I decided to write one as I found the challenges quite good and informative for beginners like me. Well hats off to Bo1ler CTF team.</p>

<p>I am writing this writeup mainly for <strong>pyjail</strong> challenges so my main focus will be on them only but I&rsquo;ll be providing the writeups for other challenges also.</p>

<h4><strong>Jails</strong></h4>

<h4>Pyjailgolf1</h4>

<p>So in this challenge we were given the following code which was running on the shell server <code>nc chal.b01lers.com 1334</code> :
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">line</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&gt;&gt;&gt;</span> <span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">flag</span><span class="o">=&amp;</span><span class="n">ldquo</span><span class="p">;[</span><span class="n">REDACTED</span><span class="p">]</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">:</span>
</span><span class='line'>    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="nb">eval</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span><span class="p">:</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="sb">``</span>
</span><span class='line'><span class="n">Basically</span> <span class="n">there</span> <span class="ow">is</span> <span class="n">an</span> <span class="o">**&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">eval</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;**</span> <span class="n">function</span> <span class="n">which</span> <span class="ow">is</span> <span class="n">vulnerable</span><span class="o">.</span> <span class="n">You</span> <span class="n">will</span> <span class="nb">input</span> <span class="nb">any</span> <span class="n">python</span> <span class="n">command</span> <span class="ow">and</span> <span class="n">it</span> <span class="n">will</span> <span class="n">be</span> <span class="n">executed</span><span class="o">.</span> <span class="n">But</span> <span class="n">this</span> <span class="n">was</span> <span class="ow">not</span> <span class="n">the</span> <span class="n">problem</span><span class="p">,</span> <span class="n">problem</span> <span class="n">was</span> <span class="n">that</span> <span class="n">we</span> <span class="n">have</span> <span class="n">to</span> <span class="k">print</span> <span class="n">the</span> <span class="n">value</span> <span class="n">of</span> <span class="n">variable</span> <span class="n">flag</span> <span class="n">by</span> <span class="n">running</span> <span class="n">a</span> <span class="n">command</span> <span class="n">whose</span> <span class="n">length</span> <span class="ow">is</span> <span class="n">less</span> <span class="n">than</span> <span class="mi">10</span> <span class="n">chars</span><span class="o">.</span> <span class="n">Now</span> <span class="k">if</span> <span class="n">you</span> <span class="n">simply</span> <span class="n">do</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="k">print</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span><span class="err">`</span> <span class="n">it</span> <span class="n">will</span> <span class="ow">not</span> <span class="n">work</span> <span class="ow">and</span> <span class="n">will</span> <span class="k">raise</span> <span class="n">an</span> <span class="ne">Exception</span><span class="o">.</span> <span class="n">All</span> <span class="n">other</span> <span class="n">commands</span> <span class="n">like</span> <span class="nb">hex</span><span class="p">(),</span> <span class="nb">id</span><span class="p">(),</span> <span class="k">exec</span><span class="p">()</span> <span class="n">etc</span> <span class="n">will</span> <span class="ow">not</span> <span class="n">work</span> <span class="n">because</span> <span class="n">they</span> <span class="n">are</span> <span class="n">functions</span> <span class="ow">and</span> <span class="n">they</span> <span class="k">return</span> <span class="n">the</span> <span class="n">value</span> <span class="n">rather</span> <span class="n">than</span> <span class="n">printing</span> <span class="n">it</span><span class="o">.</span> <span class="n">So</span> <span class="n">calling</span> <span class="n">them</span> <span class="ow">is</span> <span class="n">no</span> <span class="n">good</span> <span class="k">for</span> <span class="n">us</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Now</span> <span class="n">you</span> <span class="n">see</span> <span class="n">why</span> <span class="n">I</span> <span class="n">am</span> <span class="n">writing</span> <span class="n">a</span> <span class="n">writeup</span> <span class="k">for</span> <span class="n">this</span> <span class="n">challenge</span><span class="o">.</span> <span class="n">Because</span> <span class="n">its</span> <span class="n">so</span> <span class="n">small</span><span class="p">,</span> <span class="n">simple</span> <span class="ow">and</span> <span class="n">cute</span> <span class="n">yet</span> <span class="n">challenging</span><span class="o">.</span> <span class="n">Its</span> <span class="n">a</span> <span class="n">pure</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">out</span> <span class="n">of</span> <span class="n">the</span> <span class="n">box</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="n">thinking</span> <span class="n">challenge</span><span class="o">.</span> <span class="n">Every</span> <span class="n">beginner</span> <span class="n">can</span> <span class="n">approach</span> <span class="n">this</span> <span class="n">because</span> <span class="n">it</span> <span class="n">doesn</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">t</span> <span class="n">require</span> <span class="n">a</span> <span class="n">specific</span> <span class="n">skillset</span> <span class="n">like</span> <span class="n">pwn</span> <span class="p">(</span><span class="n">binary</span> <span class="n">exploitation</span><span class="p">)</span> <span class="n">challenges</span> <span class="p">(</span><span class="k">except</span> <span class="n">python</span> <span class="n">but</span> <span class="n">lets</span> <span class="n">be</span> <span class="n">honest</span><span class="p">,</span> <span class="n">who</span> <span class="n">doesn</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">t</span> <span class="n">know</span> <span class="n">it</span> <span class="err">😬</span><span class="p">)</span> <span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Well</span> <span class="n">after</span> <span class="n">going</span> <span class="n">through</span> <span class="n">my</span> <span class="n">python</span> <span class="n">notes</span> <span class="ow">and</span> <span class="n">doing</span> <span class="n">some</span> <span class="n">research</span> <span class="n">work</span> <span class="n">on</span> <span class="n">google</span> <span class="n">I</span> <span class="n">found</span> <span class="n">a</span> <span class="n">command</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">help</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;.</span> <span class="n">Yup</span><span class="err">!</span> <span class="n">the</span> <span class="n">answer</span> <span class="n">was</span> <span class="n">help</span> <span class="n">command</span> <span class="err">!!</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://hackolympus.com/images/boiler/image-1.png&quot;</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;center&quot;</span> <span class="n">style</span><span class="o">=</span><span class="s">&quot;width: 60%&quot;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">Flag</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">pctf</span><span class="p">{</span><span class="n">JusT_a5k_4_h3lP</span><span class="err">!</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">See</span> <span class="n">the</span> <span class="n">most</span> <span class="n">basic</span> <span class="n">commands</span> <span class="n">which</span> <span class="n">we</span> <span class="n">neglect</span> <span class="n">during</span> <span class="n">our</span> <span class="n">learning</span> <span class="n">period</span> <span class="n">helped</span> <span class="n">us</span> <span class="ow">in</span> <span class="n">this</span> <span class="n">challenge</span><span class="o">.</span> <span class="n">After</span> <span class="n">this</span> <span class="n">I</span> <span class="n">researched</span> <span class="n">more</span> <span class="n">on</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">help</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">command</span> <span class="ow">and</span> <span class="n">by</span> <span class="n">luck</span> <span class="nb">next</span> <span class="n">jail</span> <span class="n">challenge</span> <span class="n">could</span> <span class="n">be</span> <span class="n">done</span> <span class="n">using</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">help</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">command</span> <span class="n">itself</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="n">Pyjailgolf2</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">This</span> <span class="n">challenge</span> <span class="ow">is</span> <span class="n">almost</span> <span class="n">same</span> <span class="k">as</span> <span class="n">the</span> <span class="n">last</span> <span class="n">one</span> <span class="n">the</span> <span class="n">only</span> <span class="n">difference</span> <span class="ow">is</span> <span class="n">the</span> <span class="n">char</span> <span class="n">limit</span><span class="o">.</span> <span class="n">This</span> <span class="n">time</span> <span class="n">we</span> <span class="n">have</span> <span class="n">to</span> <span class="n">do</span> <span class="nb">all</span> <span class="n">our</span> <span class="n">work</span> <span class="ow">in</span> <span class="n">just</span> <span class="mi">9</span> <span class="n">chars</span><span class="o">.</span> <span class="n">Lets</span> <span class="n">take</span> <span class="n">a</span> <span class="n">look</span> <span class="n">at</span> <span class="n">the</span> <span class="n">script</span> <span class="p">:</span>
</span></code></pre></td></tr></table></div></figure>python
line = input(&lsquo;>>> &rsquo;)</p>

<p>flag=&ldquo;[REDACTED]&rdquo;</p>

<p>if len(line) > 9:
    raise Exception()</p>

<p>try:
    eval(line)
except:
    pass
<code>``
</code>nc chal.b01lers.com 1335`</p>

<p>So as I said before this time we will use <code>help()</code> command like before but there is a little change of plans. Rather than using <code>help(flag)</code> to read the value of variable flag we will use <code>help()</code> interactive version.</p>

<p><img src="http://hackolympus.com/images/boiler/image-2.png" class="center" style="width: 60%"></p>

<p>So the,</p>

<p><strong>Flag</strong> <code>pctf{Un1c0d3_i5_sw34t}</code></p>

<p>I don&rsquo;t know if this is the intended method to solve because by looking at the flag it doesn&rsquo;t look like it but whatever, we got the flag ¯\_(ツ)_/¯ .</p>

<p>Well this is it I was only able to do the first 2 pyjails. So lets move to other challenge categories .</p>

<h2><strong>Reverse Engineering</strong></h2>

<h3>weenie_hut_general</h3>

<p>This challenge was an easy reverse engineering challenge. I am not a reverse engineering player myself but I was able to do it easily.</p>

<p>The given files can be found from this <a href="https://ctf.b01lers.com/download?file_key=ad1a1baf12da64c84dc72ecc9befccddec544cd0310acefb87275692d212f7a3&amp;team_key=c2e8f607c31b1896dfe445997fb87e1315424096425ea90c9b38ee0cd0b39032">link</a></p>

<p>So running the file is no good as it does not contain main function and will return a Segmentation fault. Lets open it in ghidra and see the decompiled source code.</p>

<p>Upon opening in ghidra I found a function <code>trytorev</code>. After reading and understanding the code it was pretty obvious what it does. See for yourself:</p>

<p><img src="http://hackolympus.com/images/boiler/image-3.png" class="center" style="width: 60%"></p>

<p>it first initializes a seed to get psedurandom number from rand function.</p>

<p>It then looks for a number such that the bitwise XOR of param1, uvar1(storing first random number) and 0x3597b741 is equal to pseudorandom number uvar2 .</p>

<p>So I first made a script to do the reverse of all these operations in python (A nooby mistake, I know ). Python&rsquo;s random number function does not work in the same way like C rand function. So my team mate (<a href="https://ctftime.org/user/82627">DaBaddest</a>) made the reverse script in C and that worked :</p>

<p>His script :</p>

<p><figure class='code'><figcaption><span> (boiler.c)</span> <a href='/downloads/code/boiler.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">srand</span><span class="p">(</span><span class="mh">0x11C4</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot; %d </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">rand</span><span class="p">()</span>  <span class="o">^</span> <span class="n">rand</span><span class="p">()</span> <span class="o">^</span> <span class="mh">0x3597B741</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span> <span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And this returned us the flag</p>

<p><strong>Flag</strong> : <code>bctf{1432175799}</code></p>

<h3>Swirler</h3>

<p>Another Easy reverse engineering challenge for beginners like me</p>

<p>Given files can be found from this <a href="https://ctf.b01lers.com/download?file_key=64844ebf04da4d9513927c3d720e00799c5db04477d7b6c496bab371edd889f3&amp;team_key=c2e8f607c31b1896dfe445997fb87e1315424096425ea90c9b38ee0cd0b39032">link</a> . With the files another <a href="http://chal.b01lers.com:8001">link</a> was also given to us .</p>

<p>Ok first lets look at the given files it was a png picture file nothing special. Lets look at the given link.</p>

<p>Main function of the site was to take a picture and &ldquo;swirl&rdquo; it so that no one can look at its contents. It was JS reverse engineering and was no big thing. I copied the source code of the site and used <a href="https://jsfiddle.net/">https://jsfiddle.net/</a> to deploy it and &lsquo;fiddle&rsquo; with source code side by side to see how it works.</p>

<pre><code class="javascript">const fsSource = `
    precision highp float;

    varying vec2 vPos;

    uniform sampler2D uSampler;
    uniform vec2 uResolution;
    uniform float uTime;

    uniform float uRadius;
    uniform float uSwirlFactor;

    void main(void) {
      vec2 uv = gl_FragCoord.xy / uResolution.xy;

      float dist = distance(uv, vec2(0.5));
      mat2 rotmat;
      if (dist &lt; uRadius) {
          float percent = (uRadius - dist) / uRadius;
          float angle = percent * percent * uSwirlFactor * uTime;
          float sina = sin(angle);
          float cosa = cos(angle);
          rotmat = mat2(cosa, sina, -sina, cosa);
      } else {
          rotmat = mat2(1, 0, 0, 1);
      }

      vec2 texCoord = rotmat * (uv - vec2(0.5)) + vec2(0.5);
      vec4 diffuse = texture2D(uSampler, texCoord);
      gl_FragColor = diffuse;
    }
  \`;
</code></pre>

<p>This was the vulnerable script I just converted the following code block :
<code>javascript
if (dist &lt; uRadius) {
          float percent = (uRadius - dist) / uRadius;
          float angle = percent * percent * uSwirlFactor * uTime;
          float sina = sin(angle);
          float cosa = cos(angle);
          rotmat = mat2(cosa, sina, -sina, cosa);
</code>
to :</p>

<pre><code class="javascript">if (dist &lt; uRadius) {
          float percent = (uRadius - dist) / uRadius;
          float angle = percent * percent * -uSwirlFactor * uTime;
          float sina = sin(angle);
          float cosa = cos(angle);
          rotmat = mat2(cosa, sina, -sina, cosa);
</code></pre>

<p>and ran the code with <code>flag.png</code> and we got a qrcode</p>

<p><img src="http://hackolympus.com/images/boiler/canvas.png" class="center" style="width: 60%"></p>

<p>after scanning we got the flag :</p>

<p><strong>Flag:</strong> <code>pctf{sw1rly_sw1rly_qr_c0d3}</code></p>

<h2>WEB</h2>

<h3>gdpr</h3>

<p>This was a web challenge so a link was given : <a href="http://chal.b01lers.com:1004">chal.b01lers.com:1004</a></p>

<p>After opening the site It opened a page like this :</p>

<p><img src="http://hackolympus.com/images/boiler/image-4.png" class="center" style="width: 60%">
If you look closely when the page is loaded it covers some content. So I disabled the JS on my browser to check what it is and it loaded a page like this :</p>

<p><img src="http://hackolympus.com/images/boiler/image-5.png" class="center" style="width: 60%">
After visiting the link we got the flag</p>

<p><img src="http://hackolympus.com/images/boiler/image-6.png" class="center" style="width: 60%"></p>

<p><strong>Flag</strong>: <code>bctf{annoying_but_good?}</code></p>

<p>Well that was it folks.</p>

<p>Will come again with some another interesting writeup.</p>

<p>Till then, farewell</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mr.Robot - TryHackMe]]></title>
    <link href="http://hackolympus.com/blog/2020/11/17/mr-Robot-TryHackMe/"/>
    <updated>2020-11-17T00:00:00+05:30</updated>
    <id>http://hackolympus.com/blog/2020/11/17/mr-Robot-TryHackMe</id>
    <content type="html"><![CDATA[<p>Hello guys, Mr.Robot is one of my most favorite series and today we will be solving its CTF.</p>

<p><strong>Level - Medium</strong></p>

<p>You all can attempt this CTF from this link:</p>

<p><a href="https://tryhackme.com/room/mrrobot">https://tryhackme.com/room/mrrobot</a></p>

<p>So let the hacking begin.</p>

<p>First lets start with <strong>reconnaissance</strong> therefore a <strong><em>nmap scan</em></strong>.</p>

<p><img src="http://hackolympus.com/images/MrRobot/21.png" class="center" style="width: 70%"></p>

<p>Image of nmap scan</p>

<p>I ran the nmap scan and found 2 ports - 22 (ssh - closed) 80 (webserver).</p>

<p>Lets head to the Webserver.</p>

<p><img src="http://hackolympus.com/images/MrRobot/22.png" class="center" style="width: 70%"></p>

<p>Well, as expected from this CTF box, we got a cool, terminal look webpage.</p>

<p>Lets enumerate this webpage for more information.</p>

<p>After looking at the source page, we can easily see its a WordPress site. So there are 2 ways from here: <strong>wpscan</strong> or <strong>gobuster</strong>.</p>

<p>The wpscan method is better as it takes less time to solve. I will explain both the methods.</p>

<h5>1st Method - wpscan</h5>

<p>As I have not used wpscan in my earlier writeups, I would try and explain what it is. wpscan is an inbuilt excellent Kali Tool to enumerate wordpress sites.</p>

<p>So, I enumerate it using wpscan and we found that it has a <strong><em>robots</em></strong> page. I can&rsquo;t attach the output of the command as it is too long.</p>

<p><em>&hellip;..continued after method 2</em></p>

<h5>2nd Method - gobuster</h5>

<p>I ran a <em><strong>gobuster dir</strong></em> search on it. It resulted in many <em>time exceeding errors</em>.</p>

<p>I went to all the sceptical URL&rsquo;s like <em>license, login, phpmyadmin</em> etc. and most of them provided me some good results and hints that we are looking in the right direction. Like the license one:</p>

<p><img src="http://hackolympus.com/images/MrRobot/24.png" class="center" style="width: 70%">
Or the readme :</p>

<p><img src="http://hackolympus.com/images/MrRobot/25.png" class="center" style="width: 70%">
Well, I think you all have got an idea from where we&rsquo;ll be getting the best results and if not, don&rsquo;t worry as it is <em><strong>robots</strong></em> file of the webserver.</p>

<h5>The Robots file</h5>

<p>When going at <strong>robots</strong> file:</p>

<p><img src="http://hackolympus.com/images/MrRobot/26.png" class="center" style="width: 70%">
We see two locations on the webserver which were not discovered before. Now, here <em><strong>fsocity.dic</strong></em> is a wordlist and <strong>key-1-of-3.txt</strong> will reveal our first flag.</p>

<p><img src="http://hackolympus.com/images/MrRobot/27.png" class="center" style="width: 70%">
Now, we have got a dictionary. Lets use it somewhere. I know that I can&rsquo;t use it for <em>ssh</em> brute forcing as the port is closed, so only one place is left where it can be used i.e., <em>the wordpress admin panel.</em></p>

<p>Now, the <em><strong>.dic</strong></em> file is of around 5 MB which means approx. 5 lakh usernames and password respectively to try out but we don&rsquo;t have that much time, we&rsquo;ll have to filter our possibilities. If somehow we get to know the username, 50% of the total possibilities can be reduced, that&rsquo;s a lot of reduction and time saving.</p>

<p>We can cut it down more by using <strong>uniq</strong> command by filtering out all the duplicate strings.</p>

<p>You can compare the sizes before and after the filter operation.</p>

<p><img src="http://hackolympus.com/images/MrRobot/30.png" class="center" style="width: 70%">
So lets see how I enumerated the right user from the dictionary file.</p>

<p>I passed a lot of random credential pair like admin:admin , user:pass etc that are very common and I got common response: <em><strong>invalid username</strong></em>.</p>

<p><img src="http://hackolympus.com/images/MrRobot/29.png" class="center" style="width: 70%">
I used this to enumerate the correct user using <strong><em>hydra</em></strong> tool. <strong><em>Hydra</em></strong> is a tool through which we can brute force password for different services.</p>

<p>We have got an idea that the &lsquo;<em>F</em>&rsquo; parameter of hydra command is <em>Invalid Username</em>. If username would have been correct, It wouldn&rsquo;t have shown us this message instead, it would have given us a message regarding <em>invalid password</em>.</p>

<p>I&rsquo;ll gather the required information using <em>burp suite.</em></p>

<p><img src="http://hackolympus.com/images/MrRobot/31.png" class="center" style="width: 70%">
From the above data our command will be:</p>

<pre><code>hydra -L dict_sorted.txt -p TestPass 10.10.73.3 http-post-form "/wp-login/:log=^USER^&amp;pwd=^PASS^&amp;wp-submit=Log+In&amp;redirect_to=http%3A%2F%2F10.10.73.3%2Fwp-admin%2F&amp;testcookie=1:F=Invalid username"
</code></pre>

<p>After some time:</p>

<p><img src="http://hackolympus.com/images/MrRobot/32.png" class="center" style="width: 70%"></p>

<p>As you can see we found 3 usernames.</p>

<p>Lets run this <strong><em>Hydra</em></strong> again using username <strong><em>elliot</em></strong> but this time we will be using our wordlist in password field.</p>

<p><img src="http://hackolympus.com/images/MrRobot/33.png" class="center" style="width: 70%">
So there we go, we found out the password of user <strong>elliot</strong>.</p>

<p>We have now got full control over the wordpress website. Lets see how can we exploit this to gain control over the system.</p>

<p>After exploring the wordpress dashboard, I explored that we can change the code of pre uploaded php files. I changed the code of one of the php file and changed it to already provided php-reverse-shell code in <strong><em>/usr/share/webshells/php</em></strong> directory. I copy-pasted the code after doing the required changes (host IP and port) and started a <strong><em>nc</em></strong> (<em>netcat listener</em>) .</p>

<p><img src="http://hackolympus.com/images/MrRobot/34.png" class="center" style="width: 70%">
Visit the page that you have edited and get back to <strong><em>nc</em></strong> reverse shell and you&rsquo;ll see we have got back our reverse shell.</p>

<p><img src="http://hackolympus.com/images/MrRobot/35.png" class="center" style="width: 70%"></p>

<p><img src="http://hackolympus.com/images/MrRobot/36.png" class="center" style="width: 70%">
<strong>Note</strong>: <em>If you are unable to get a reverse shell, probably it is because of host&rsquo;s firewall.</em></p>

<p>At last, we have got a reverse shell. I navigated to the <strong>home</strong> directory where I found a user named <strong>robot</strong>. I checked his directory and I can see that we have successfully found our 2nd flag but we don&rsquo;t have the permission to read it. We have another file that basically contains the credential pair of robot user. But, here the password is encrypted.</p>

<p><img src="http://hackolympus.com/images/MrRobot/37.png" class="center" style="width: 70%">
Lets try to Identify the hash type using <strong>hashid</strong> command. The top 3 possibilities are MD2, MD5 and MD4. I cracked the hash using this site: <a href="https://crackstation.net/">crackstation</a></p>

<p><img src="http://hackolympus.com/images/MrRobot/38.png" class="center" style="width: 70%">
I changed the user to robot using <strong>su</strong> command. User <strong>robot</strong> can read that file and there we go we found our <strong>2nd flag</strong>.</p>

<p><img src="http://hackolympus.com/images/MrRobot/40.png" class="center" style="width: 70%"></p>

<p>Now, I want the root access of the system and for that I&rsquo;ll have to do <strong>privilege escalation.</strong></p>

<p>I tried to inspect my sudo privileges but unfortunately, I can&rsquo;t run any command with sudo through user robot.</p>

<p>Lets see if we have any SUID privileges. We see from the output that <strong>nmap</strong> has SUID privileges. So lets exploit it.</p>

<p>I saw the privilege escalation of nmap from <a href="https://gtfobins.github.io/gtfobins/nmap/">gtfobins</a>. So, I tried the privilege escalation and bingo !! We did it.</p>

<p><img src="http://hackolympus.com/images/MrRobot/41.png" class="center" style="width: 70%">
We now have root access !</p>

<p>I found the third flag in the root directory.</p>

<p><img src="http://hackolympus.com/images/MrRobot/42.png" class="center" style="width: 70%"></p>

<hr />

<p>I am not a professional, so only feedback can make me better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gotta Catch'em All! TryHackMe WriteUp]]></title>
    <link href="http://hackolympus.com/blog/2020/11/13/Gotta-Catch-em-All-TryHackMe-writeUp/"/>
    <updated>2020-11-13T00:00:00+05:30</updated>
    <id>http://hackolympus.com/blog/2020/11/13/Gotta-Catch-em-All-TryHackMe-writeUp</id>
    <content type="html"><![CDATA[<p>Hello guys, I am not a professional so feedback will be appreciated.</p>

<p><strong>level - very easy</strong></p>

<p><strong>You can attempt this CTF challenge here</strong>: <a href="https://tryhackme.com/room/pokemon">Gotta Catch em' all</a></p>

<p>So let the hacking begin.</p>

<p>Lets start with a nmap scan on the box.</p>

<p><img src="http://hackolympus.com/images/gottacatchemallTHM/8.png" class="center" style="width: 60%"></p>

<p>As you can see we found port <strong>22 (ssh) and 80 (webserver)</strong> open.</p>

<p>As usual we go to the webpage and we found Apache default webpage running on it.</p>

<p><img src="http://hackolympus.com/images/gottacatchemallTHM/9.png" class="center" style="width: 60%"></p>

<p>now I started inspecting elements and believe me this step took me a great amount of time. The author was very clever, he/she camouflaged the ssh credentials in inspect element itself just above the &ldquo;check the console&rdquo; comment</p>

<p><img src="http://hackolympus.com/images/gottacatchemallTHM/10.png" class="center" style="width: 60%"></p>

<p>It was right in front of my eyes all the time but I was not able to find it but at last we found it.</p>

<p>lets login through ssh with the found credentials.</p>

<p>In <em><strong>Desktop</strong></em> directory I found a zip file. I unzip it and we found our first flag but its encoded and it looks like its in <strong>hex.</strong></p>

<p><img src="http://hackolympus.com/images/gottacatchemallTHM/16.png" class="center" style="width: 60%"></p>

<p>I decoded this using this webite:</p>

<p><a href="https://www.asciitohex.com/">https://www.asciitohex.com/</a></p>

<p><img src="http://hackolympus.com/images/gottacatchemallTHM/17.png" class="center" style="width: 60%">
So here we go our first flag.</p>

<p>After finding first flag I looked more into the home directory for some other interesting stuff and in videos I accessed a couple of subfolders after that I found a &lsquo;.cplusplus&rsquo; file.</p>

<p>I looked into it and voilà we found credentials for other user- <em>ash</em>.</p>

<p><img src="https://hackolympus.files.wordpress.com/2020/11/image-12.png?w=1024" alt="" /></p>

<p><img src="http://hackolympus.com/images/gottacatchemallTHM/12.png" class="center" style="width: 60%">
Now exit from ssh and login into user ash.</p>

<p>ash had a un-interactive shell</p>

<p>I checked my <strong>sudo</strong> privileges and here we go we can use all sudo commands for this user.</p>

<p>so I took no time to change my user into root.</p>

<p><img src="http://hackolympus.com/images/gottacatchemallTHM/18.png" class="center" style="width: 60%">
Now we know that all flags are in this machine, we just have to search for it.</p>

<p>So I began my search and I found 2nd flag in in webserver folder in <em><strong>/var/www/html</strong></em></p>

<p>now if we run cat command we see</p>

<p><img src="http://hackolympus.com/images/gottacatchemallTHM/14.png" class="center" style="width: 60%">
Now this is encoded and if you look closely it appears that words are rotated so its a rot algorithm. So I used the following site to decode it:</p>

<p>and there we go we found our second flag.</p>

<p><a href="http://theblob.org/rot.cgi">http://theblob.org/rot.</a><a href="http://theblob.org/rot.cgi">cgi</a></p>

<p>so if we decode it the rot 1 gives us understandable results</p>

<p><img src="http://hackolympus.com/images/gottacatchemallTHM/15.png" class="center" style="width: 60%"></p>

<p>I looked into <em><strong>ash user</strong></em> folder but I found nothing interesting over there.</p>

<p>I searched into <strong>/home</strong> directory and I found <strong>roots-pokemon.txt</strong></p>

<p>I looked into it and we found the answer of <strong>task4 root&rsquo;s favorite pokemon.</strong></p>

<p>So I searched more but I could not find the last flag.</p>

<p>so I ran the <em><strong>find</strong></em> command</p>

<p><img src="http://hackolympus.com/images/gottacatchemallTHM/19.png" class="center" style="width: 60%"></p>

<p>reading the above file we found that its also encoded and its base64 so I decoded it and we found our last flag.</p>

<p><img src="http://hackolympus.com/images/gottacatchemallTHM/20.png" class="center" style="width: 60%"></p>

<p>Hope you enjoyed this writeup. Thanks all for reading.</p>

<p>Again I am not a professional so feedback is much appreciated.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brooklyn Nine Nine - TryHackMe]]></title>
    <link href="http://hackolympus.com/blog/2020/10/11/Brooklyn-Nine-Nine-TryHackMe/"/>
    <updated>2020-10-11T00:00:00+05:30</updated>
    <id>http://hackolympus.com/blog/2020/10/11/Brooklyn-Nine-Nine-TryHackMe</id>
    <content type="html"><![CDATA[<p>Hello guys. This is my first tryhackme writeup so please give your honest reviews. Since I am not a professional, your honest reviews will charge my batteries.</p>

<p>To attempt this machine go to this link : <a href="https://tryhackme.com/room/brooklynninenine">Brooklyn99</a></p>

<p>So let the hacking begin.</p>

<p>Lets start by doing reconnaissance.</p>

<p>First, I ran a basic nmap version scan on the box.</p>

<p><img src="http://hackolympus.com/images/b99/image-1.png" class="center", style="width: 60%"></p>

<p>As we can see there are 3 ports open. First, I went to the webpage of the machine.</p>

<p><img src="http://hackolympus.com/images/b99/image-2.png" class="center", style="width: 60%"></p>

<p>uff, A rabbit hole I viewed the page source but i found nothing special.</p>

<p>Next I inspected FTP port. I tried anonymous login and it worked:</p>

<p><img src="http://hackolympus.com/images/b99/image-3.png" class="center", style="width: 60%"></p>

<p>And we found a file: <strong>note_to_jake.txt</strong>. I downloaded the file by using get file command</p>

<p>Lets see what is written in that file:</p>

<pre><code>From Amy,Jake please change your password. It is too weak and holt will be mad if someone hacks into the nine nine
</code></pre>

<p>Looks like we have found a vulnerable username - <strong>jake</strong></p>

<p>lets fire up hydra and let it do the rest of the job.</p>

<p><img src="http://hackolympus.com/images/b99/image-4.png" class="center", style="width: 60%">
we have found a password lets try to connect using that password</p>

<p><strong>LOGIN SUCCESSFUL</strong></p>

<p>Lets enumerate this machine.</p>

<p>In the user folder of jake. We found nothing interesting. I ran <strong>sudo -l</strong> command to see if I have any admin rights and yes i was right.</p>

<p><img src="http://hackolympus.com/images/b99/image-5.png" class="center", style="width: 60%">
we can run <strong>less</strong> command with sudo rights.</p>

<p>From here I went to <strong>holt</strong> user folder where I found user.txt but only <strong>holt</strong> could open it from his user but as we all know we have sudo privileges on less command so I viewed it with less.</p>

<p><img src="http://hackolympus.com/images/b99/image-6.png" class="center", style="width: 60%">
And here we go, we found our first flag.</p>

<h5><strong>Privilege Escalation</strong></h5>

<p>Time for privilege escalation. In the <strong>holt</strong> user folder I found another file: <strong>nano.save</strong></p>

<p>We will use this file for privilege escalation</p>

<p>We will open this file with sudo privileges using less</p>

<p><img src="http://hackolympus.com/images/b99/image-7.png" class="center", style="width: 60%">
We will run the following command to open shell:</p>

<pre><code>!/bin/bash
</code></pre>

<p><img src="http://hackolympus.com/images/b99/image-8.png" class="center", style="width: 60%">
And here we go, we got a root shell.</p>

<p><img src="http://hackolympus.com/images/b99/image-9.png" class="center", style="width: 60%">
Now just go to root folder and we will get <strong>root.txt</strong></p>

<p><img src="http://hackolympus.com/images/b99/image-10.png" class="center", style="width: 60%">
This is my first writeup so any suggestions will be highly appreciated</p>
]]></content>
  </entry>
  
</feed>
